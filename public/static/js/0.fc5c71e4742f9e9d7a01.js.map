{"version":3,"sources":["webpack:///src/components/uploadBtn.vue","webpack:///./src/components/uploadBtn.vue?13f3","webpack:///./src/components/uploadBtn.vue","webpack:///src/view/layout/projects/add.vue","webpack:///./src/view/layout/projects/add.vue?ec4b","webpack:///./src/view/layout/projects/add.vue","webpack:///./src/util/qiniu.js","webpack:///./node_modules/wangeditor/release/wangEditor.js","webpack:///src/components/editor/index.vue","webpack:///./src/components/editor/index.vue?a6e7","webpack:///./src/components/editor/index.vue"],"names":["uploadBtn","this","data","url","_this","getToken","components_uploadBtn","render","$createElement","_self","_c","_m","staticRenderFns","_h","attrs","id","_v","type","name","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","add","editor","formData","msg","_this2","key","val","res","_this3","getData","projects_add","_vm","staticClass","model","label-width","label","value","callback","$$v","$set","expression","action","show-file-list","on-success","upload","token","src","img","$route","on","click","submit","_e","edit","module","exports","option","Qiniu","uploader","runtimes","browse_button","button","uptoken","get_new_uptoken","domain","container","max_file_size","flash_swf_url","max_retries","dragdrop","drop_element","chunk_size","auto_start","unique_names","init","FilesAdded","up","files","plupload","each","file","BeforeUpload","UploadProgress","FileUploaded","info","obj","JSON","parse","response","Error","err","errTip","UploadComplete","Key","factory","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","html","div","nodeType","selectorResult","Array","replace","trim","indexOf","document","createElement","innerHTML","children","result","querySelectorAll","length","i","$","prototype","constructor","forEach","fn","elem","call","clone","deep","cloneList","push","cloneNode","get","index","first","last","types","split","addEventListener","e","target","matches","off","removeEventListener","attr","getAttribute","setAttribute","addClass","className","arr","filter","item","join","removeClass","css","currentStyle","style","resultArr","map","show","hide","childNodes","append","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","config","menus","fontNames","colors","emotions","title","content","alt","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","success","fail","error","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","window","objForEach","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","width","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$trs","trLength","tr","locationData","$currentTr","newTr","trData","tdIndex","$currentTd","toLowerCase","$table","textValId","width30","width50","width100","delBtn","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","tabsConfig","fileElem","fileList","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","Date","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","onload","onerror","onabort","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","encodeURIComponent","XMLHttpRequest","open","ontimeout","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","customInsert","errno","beforeResult","prevent","setRequestHeader","send","reader","readAsDataURL","editorId","Editor","toolbarSelector","textSelector","customConfig","_initConfig","Object","assign","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","txt","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","create","_offAllEvent","varArgs","TypeError","to","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor","String","components_editor"],"mappings":"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","file":"static/js/0.fc5c71e4742f9e9d7a01.js","sourcesContent":["<template>\n  <div>\n    <label id=\"container\">提交文件\n      <input type=\"file\" id=\"btn\" name=\"file\">\n    </label>\n  </div>\n</template>\n\n<script>\n  import qiniu from '@/util/qiniu'\n\n  export default {\n    name: \"upload-btn\",\n    data() {\n      return {\n        url: ''\n      }\n    },\n    methods: {\n      getToken() {\n        let that = this\n        this.$axios.qiniuGet().then(res => {\n          that.token = res.data\n          qiniu({token: res.data}, function (data) {\n            that.url = data.url\n            console.log(data);\n            that.$emit('uploadSuccess', that.url)\n          })\n        })\n\n      }\n    },\n    created() {\n      this.$nextTick(() => {\n        this.getToken()\n      })\n    }\n  }\n</script>\n\n<style scoped>\n  #container{\n    width: 75px;\n    heigth:50px;\n    background:#409eff;\n    display: block;\n    border-radius: 4px;\n    border: 1px solid #409eff;\n    text-align:center;\n    cursor: pointer;\n  }\n  #btn {\n    display: none;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/uploadBtn.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('label',{attrs:{\"id\":\"container\"}},[_vm._v(\"提交文件\\n    \"),_c('input',{attrs:{\"type\":\"file\",\"id\":\"btn\",\"name\":\"file\"}})])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5c943538\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/uploadBtn.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5c943538\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./uploadBtn.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploadBtn.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploadBtn.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5c943538\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./uploadBtn.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5c943538\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/uploadBtn.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"newsadd\">\n    <el-form :model=\"formData\" label-width=\"80px\">\n      <el-form-item label=\"title\">\n        <el-input v-model=\"formData.title\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"id\">\n        <el-input v-model=\"formData.id\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"上传图片\">\n        <el-upload\n          class=\"avatar-uploader\"\n          action=\"https://upload-z1.qiniup.com\"\n          :show-file-list=\"false\"\n          :on-success=\"upload\"\n          :data=\"{token: token}\"\n        >\n          <img v-if=\"formData.img\" :src=\"formData.img\" class=\"avatar\">\n          <i v-else class=\" el-upload  el-icon-plus  avatar-uploader-icon\"></i>\n        </el-upload>\n      </el-form-item>\n      <el-form-item label=\"content\">\n        <el-input v-model=\"formData.content\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"site\">\n        <el-input v-model=\"formData.site\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"danger\" @click=\"submit\" v-if=\"this.$route.name == '工程添加页'\">保存</el-button>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"danger\" @click=\"edit\" v-if=\"this.$route.name == '工程编辑页'\">确定编辑</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\n  import uploadBtn from '@/components/uploadBtn'\n  import editor from '@/components/editor/index'\n  import qiniu from '@/util/qiniu'\n  export default {\n    name: \"add\",\n    components:{\n      editor,\n      uploadBtn\n    },\n    data() {\n      return {\n        formData: {\n          title: '',\n          id:'',\n          img:'',\n          content:'',\n          site:''\n        },\n        token:''\n      }\n    },\n    methods:{\n      edit() {\n        let params = {\n          ...this.formData,\n          nid: this.$route.query.id\n        }\n        this.$axios.post('updateProjects', params).then(res => {\n          if (res.code == 200) {\n            this.$message({\n              message: '新闻编辑成功',\n              type: 'success'\n            })\n          } else {\n            this.$message({\n              message: res.msg,\n              type: 'warning'\n            })\n          }\n        })\n        this.$router.push('/projects')\n      },\n      submit(){\n        this.$axios.post('addProjects',this.formData).then(res => {\n          if(res.code==200){\n            this.$message({\n              message: '工程添加成功',\n              type: 'success'\n            });\n          }else{\n            this.$message({\n              message: res.msg,\n              type: 'warning'\n            });\n          }\n          setTimeout(() =>{\n            this.$router.push('/projects')\n          },1500)\n        })\n      },\n      upload(res){\n        this.formData.img = \"http://image.yaojunrong.com/\"+res.key\n      },\n      getText(val){\n        this.formData.site = val\n      },\n      getToken(){\n        let that = this\n        this.$axios.qiniuGet().then(res =>{\n          that.token = res.data\n          console.log(res);\n\n        })\n      },\n      getUrl(url){\n        this.formData.content += `<img src=\"${url}\"/>`\n      },\n      getData(){\n\n        this.$axios.get('getProjects',{id:this.$route.query.id}).then(res =>{\n          this.formData = res.data[0]\n        })\n      }\n    } ,\n    created(){\n      if(this.$route.name == '工程编辑页'){\n        this.getData()\n      }\n      this.getToken()\n\n    }\n  }\n</script>\n\n<style scoped>\n\n  .newsadd {\n    margin-top: 100px;\n    margin-left: 210px;\n  }\n\n  .avatar-uploader .el-upload {\n    border: 1px dashed #d9d9d9;\n    border-radius: 6px;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n  }\n  .avatar-uploader .el-upload:hover {\n    border-color: #409EFF;\n  }\n  .avatar-uploader-icon {\n    font-size: 28px;\n    color: #8c939d;\n    width: 178px;\n    height: 178px;\n    line-height: 178px;\n    text-align: center;\n  }\n  .avatar {\n    width: 178px;\n    height: 178px;\n    display: block;\n  }\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/view/layout/projects/add.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"newsadd\"},[_c('el-form',{attrs:{\"model\":_vm.formData,\"label-width\":\"80px\"}},[_c('el-form-item',{attrs:{\"label\":\"title\"}},[_c('el-input',{model:{value:(_vm.formData.title),callback:function ($$v) {_vm.$set(_vm.formData, \"title\", $$v)},expression:\"formData.title\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"id\"}},[_c('el-input',{model:{value:(_vm.formData.id),callback:function ($$v) {_vm.$set(_vm.formData, \"id\", $$v)},expression:\"formData.id\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"上传图片\"}},[_c('el-upload',{staticClass:\"avatar-uploader\",attrs:{\"action\":\"https://upload-z1.qiniup.com\",\"show-file-list\":false,\"on-success\":_vm.upload,\"data\":{token: _vm.token}}},[(_vm.formData.img)?_c('img',{staticClass:\"avatar\",attrs:{\"src\":_vm.formData.img}}):_c('i',{staticClass:\" el-upload  el-icon-plus  avatar-uploader-icon\"})])],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"content\"}},[_c('el-input',{model:{value:(_vm.formData.content),callback:function ($$v) {_vm.$set(_vm.formData, \"content\", $$v)},expression:\"formData.content\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"site\"}},[_c('el-input',{model:{value:(_vm.formData.site),callback:function ($$v) {_vm.$set(_vm.formData, \"site\", $$v)},expression:\"formData.site\"}})],1),_vm._v(\" \"),_c('el-form-item',[(this.$route.name == '工程添加页')?_c('el-button',{attrs:{\"type\":\"danger\"},on:{\"click\":_vm.submit}},[_vm._v(\"保存\")]):_vm._e()],1),_vm._v(\" \"),_c('el-form-item',[(this.$route.name == '工程编辑页')?_c('el-button',{attrs:{\"type\":\"danger\"},on:{\"click\":_vm.edit}},[_vm._v(\"确定编辑\")]):_vm._e()],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-dd356754\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/view/layout/projects/add.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-dd356754\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./add.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./add.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./add.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-dd356754\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./add.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-dd356754\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/projects/add.vue\n// module id = null\n// module chunks = ","var qiniu = function(option,callback) {\n  var uploader = Qiniu.uploader({\n    runtimes: 'html5,flash,html4',      // 上传模式，依次退化\n    browse_button: option.button || 'btn',         // 上传选择的点选按钮，必需\n    // 在初始化时，uptoken，uptoken_url，uptoken_func三个参数中必须有一个被设置\n    // 切如果提供了多个，其优先级为uptoken > uptoken_url > uptoken_func\n    // 其中uptoken是直接提供上传凭证，uptoken_url是提供了获取上传凭证的地址，如果需要定制获取uptoken的过程则可以设置uptoken_func\n    uptoken : option.token, // uptoken是上传凭证，由其他程序生成\n    // uptoken_url: '/uptoken',         // Ajax请求uptoken的Url，强烈建议设置（服务端提供）\n    // uptoken_func: function(){    // 在需要获取uptoken时，该方法会被调用\n    //    // do something\n    //    return uptoken;\n    // },\n    get_new_uptoken: false,             // 设置上传文件的时候是否每次都重新获取新的uptoken\n    // downtoken_url: '/downtoken',\n    // Ajax请求downToken的Url，私有空间时使用，JS-SDK将向该地址POST文件的key和domain，服务端返回的JSON必须包含url字段，url值为该文件的下载地址\n    // unique_names: true,              // 默认false，key为文件名。若开启该选项，JS-SDK会为每个文件自动生成key（文件名）\n    // save_key: true,                  // 默认false。若在服务端生成uptoken的上传策略中指定了sava_key，则开启，SDK在前端将不对key进行任何处理\n    domain: 'image.yaojunrong.com',     // bucket域名，下载资源时用到，必需\n    container: 'container',             // 上传区域DOM ID，默认是browser_button的父元素\n    max_file_size: '10mb',             // 最大文件体积限制\n    flash_swf_url: 'path/of/plupload/Moxie.swf',  //引入flash，相对路径\n    max_retries: 3,                     // 上传失败最大重试次数\n    dragdrop: true,                     // 开启可拖曳上传\n    drop_element: option.container||'container',          // 拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传\n    chunk_size: '4mb',                  // 分块上传时，每块的体积\n    auto_start: true,\n    unique_names: true,    // 选择文件后自动上传，若关闭需要自己绑定事件触发上传\n    //x_vars : {\n    //    查看自定义变量\n    //    'time' : function(up,file) {\n    //        var time = (new Date()).getTime();\n    // do something with 'time'\n    //        return time;\n    //    },\n    //    'size' : function(up,file) {\n    //        var size = file.size;\n    // do something with 'size'\n    //        return size;\n    //    }\n    //},\n    init: {\n      'FilesAdded': function(up, files) {\n        plupload.each(files, function(file) {\n          // 文件添加进队列后，处理相关的事情\n        });\n      },\n      'BeforeUpload': function(up, file) {\n        // 每个文件上传前，处理相关的事情\n      },\n      'UploadProgress': function(up, file) {\n        // 每个文件上传时，处理相关的事情\n      },\n      'FileUploaded': function(up, file, info) {\n        // 每个文件上传成功后，处理相关的事情\n        // 其中info.response是文件上传成功后，服务端返回的json，形式如：\n        // {\n        //    \"hash\": \"Fh8xVqod2MQ1mocfI4S4KpRL6D98\",\n        //    \"key\": \"gogopher.jpg\"\n        //  }\n        var obj = JSON.parse(info.response)\n        obj.url = \"http://image.yaojunrong.com/\"+obj.key;\n        callback(obj)\n        // 查看简单反馈\n        // var domain = up.getOption('domain');\n        // var res = parseJSON(info.response);\n        // var sourceLink = domain +\"/\"+ res.key; 获取上传成功后的文件的Url\n      },\n      'Error': function(up, err, errTip) {\n        //上传出错时，处理相关的事情\n      },\n      'UploadComplete': function() {\n        //队列文件处理完毕后，处理相关的事情\n      },\n      'Key': function(up, file) {\n        // 若想在前端对每个文件的key进行个性化处理，可以配置该函数\n        // 该配置必须要在unique_names: false，save_key: false时才生效\n        var key = \"\";\n        // do something with key here\n        return key\n      }\n    }\n  });\n// domain为七牛空间对应的域名，选择某个空间后，可通过 空间设置->基本设置->域名设置 查看获取\n// uploader为一个plupload对象，继承了所有plupload的方法\n}\n\n\nmodule.exports = qiniu;\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/qiniu.js","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"><i/></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"><i/></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"><i/>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"><i/>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"><i/></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").+?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").+?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 500) {\n                // 间隔大于 500 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                val = encodeURIComponent(val);\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 0 1","<template>\n  <div id=\"editor\">\n\n  </div>\n</template>\n\n<script>\n  import WangEditor from 'wangeditor'\n\n  export default {\n    name: \"index\",\n    data(){\n      return {\n        editor:null,\n        currentValue:''\n      }\n    },\n    props:{\n      value:{\n        type:String\n      }\n    },\n    watch:{\n     value(val){\n       this.currentValue = val\n       this.editor.txt.html(val)\n     }\n    },\n    created(){\n      let that = this\n      this.$nextTick(() =>{\n        this.editor = new WangEditor('#editor')\n        this.editor.customConfig.onchange = function (html) {\n          // html 即变化之后的内容\n          console.log(html);\n          that.$emit('input',html)\n          that.$emit('getText',that.editor.txt.text())\n        }\n        this.editor.create()\n        document.getElementById('editor').addEventListener('keyup', function () {\n          // 如果未配置 editor.customConfig.onchange，则 editor.change 为 undefined\n          that.editor.change && that.editor.change()\n        })\n      })\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/editor/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"editor\"}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-776e2554\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/editor/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-776e2554\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-776e2554\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-776e2554\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/editor/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}